{"ast":null,"code":"var _jsxFileName = \"/Users/dazz6/Documents/study/react-masterclass/src/App.js\";\nimport StyleComponent from \"./StyleComponent.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  background-color: ${props => props.theme.backgroundColor};\n`;\n\n// styled.\"\" < html 코드\n_c = Wrapper;\nconst Box = styled.div`\n  background-color: ${props => props.bgColor};\n  width: 100px;\n  height: 100px;\n`;\n_c2 = Box;\nconst Text = styled.span`\n  color: white;\n`;\n\n// Box의 모든 속성들을 들고 온 다음 해당 속성만 추가함\n// Box에서 props를 받아 처리했던 것도 동일하게 가능\nconst Circle = styled(Box)`\n  border-radius: 50px;\n`;\n_c3 = Circle;\nconst Btn = styled.button`\n  color: white;\n  background-color: tomato;\n  border: 0;\n  border-radius: 15px;\n`;\n\n// input component 안 모든 input에 required, minLength 속성 추가\n_c4 = Btn;\nconst Input = styled.input.attrs({\n  required: true,\n  minLength: 10\n})`\n  background-color: tomato;\n`;\n\n// keyframes : 애니메이션에서 사용 (styled-components와 별개)\n_c5 = Input;\nconst rotationAdnimation = keyframes`\n  0%{\n  transform:rotate(0deg);\n  border-radius:0px;\n  }\n  50%{\n  border-radius:100px;\n  }\n  100%{\n   transform:rotate(360deg);\n  border-radius:0px;\n  }\n`;\nconst Emoji = styled.span`\n  font-size: 36px;\n`;\n\n// Box1 내의 span 태그 선택 가능\n// span 안에 있는 &:hover는 span:hover와 동일 -> tag 이름에 의존하는 상태\n// ${Emoji} 형식을 사용해서 jsx 부분에는 <Emoji as=\"\">를 사용함으로 tag에 의존하지 않도록 할 수 있음\n// (참고) active : 클릭하고 있는 상태\n_c6 = Emoji;\nconst Box1 = styled.div`\n  height: 200px;\n  width: 200px;\n  background-color: tomato;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  animation: ${rotationAdnimation} 1s linear infinite;\n  span {\n    font-size: 50px;\n    &:hover {\n      font-size: 70px;\n    }\n    &:active {\n      opacity: 0;\n    }\n  }\n  ${Emoji} {\n    font-size: 50px;\n    &:hover {\n      font-size: 70px;\n    }\n    &:active {\n      opacity: 0;\n    }\n  }\n`;\n\n/* theme : 색을 가지고 있는 모든 오브젝트 */\n// index.js에서 설정\n_c7 = Box1;\nconst Title = styled.h1`\n  color: ${props => props.theme.textColor};\n`;\n_c8 = Title;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      bgColor: \"teal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Circle, {\n      bgColor: \"whitesmoke\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Btn, {\n      as: \"a\",\n      href: \"/\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box1, {\n      children: [/*#__PURE__*/_jsxDEV(Emoji, {\n        children: \"^_^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        children: \"\\uD558\\uD558\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_c9 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Box\");\n$RefreshReg$(_c3, \"Circle\");\n$RefreshReg$(_c4, \"Btn\");\n$RefreshReg$(_c5, \"Input\");\n$RefreshReg$(_c6, \"Emoji\");\n$RefreshReg$(_c7, \"Box1\");\n$RefreshReg$(_c8, \"Title\");\n$RefreshReg$(_c9, \"App\");","map":{"version":3,"names":["StyleComponent","jsxDEV","_jsxDEV","Wrapper","styled","div","props","theme","backgroundColor","_c","Box","bgColor","_c2","Text","span","Circle","_c3","Btn","button","_c4","Input","input","attrs","required","minLength","_c5","rotationAdnimation","keyframes","Emoji","_c6","Box1","_c7","Title","h1","textColor","_c8","App","children","fileName","_jsxFileName","lineNumber","columnNumber","as","href","_c9","$RefreshReg$"],"sources":["/Users/dazz6/Documents/study/react-masterclass/src/App.js"],"sourcesContent":["import StyleComponent from \"./StyleComponent.js\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  background-color: ${(props) => props.theme.backgroundColor};\n`;\n\n// styled.\"\" < html 코드\nconst Box = styled.div`\n  background-color: ${(props) => props.bgColor};\n  width: 100px;\n  height: 100px;\n`;\n\nconst Text = styled.span`\n  color: white;\n`;\n\n// Box의 모든 속성들을 들고 온 다음 해당 속성만 추가함\n// Box에서 props를 받아 처리했던 것도 동일하게 가능\nconst Circle = styled(Box)`\n  border-radius: 50px;\n`;\n\nconst Btn = styled.button`\n  color: white;\n  background-color: tomato;\n  border: 0;\n  border-radius: 15px;\n`;\n\n// input component 안 모든 input에 required, minLength 속성 추가\nconst Input = styled.input.attrs({ required: true, minLength: 10 })`\n  background-color: tomato;\n`;\n\n// keyframes : 애니메이션에서 사용 (styled-components와 별개)\nconst rotationAdnimation = keyframes`\n  0%{\n  transform:rotate(0deg);\n  border-radius:0px;\n  }\n  50%{\n  border-radius:100px;\n  }\n  100%{\n   transform:rotate(360deg);\n  border-radius:0px;\n  }\n`;\n\nconst Emoji = styled.span`\n  font-size: 36px;\n`;\n\n// Box1 내의 span 태그 선택 가능\n// span 안에 있는 &:hover는 span:hover와 동일 -> tag 이름에 의존하는 상태\n// ${Emoji} 형식을 사용해서 jsx 부분에는 <Emoji as=\"\">를 사용함으로 tag에 의존하지 않도록 할 수 있음\n// (참고) active : 클릭하고 있는 상태\nconst Box1 = styled.div`\n  height: 200px;\n  width: 200px;\n  background-color: tomato;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  animation: ${rotationAdnimation} 1s linear infinite;\n  span {\n    font-size: 50px;\n    &:hover {\n      font-size: 70px;\n    }\n    &:active {\n      opacity: 0;\n    }\n  }\n  ${Emoji} {\n    font-size: 50px;\n    &:hover {\n      font-size: 70px;\n    }\n    &:active {\n      opacity: 0;\n    }\n  }\n`;\n\n/* theme : 색을 가지고 있는 모든 오브젝트 */\n// index.js에서 설정\n\nconst Title = styled.h1`\n  color: ${(props) => props.theme.textColor};\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Box bgColor=\"teal\" />\n      <Circle bgColor=\"whitesmoke\" />\n      {/* as props 로 Btn의 button 태그를 a 태그로 변경하여 같은 스타일을 사용하는 다른 태그로 만듦 */}\n      <Btn as=\"a\" href=\"/\">\n        Log In\n      </Btn>\n      <Input />\n      <Input />\n      <Box1>\n        {/* 해당 span은 styled-components로 생성하지 않음 Box1 내에서 선택하여 처리함 */}\n        {/* <span>^_^</span> */}\n        <Emoji>^_^</Emoji>\n        <Title>하하</Title>\n      </Box1>\n    </Wrapper>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}