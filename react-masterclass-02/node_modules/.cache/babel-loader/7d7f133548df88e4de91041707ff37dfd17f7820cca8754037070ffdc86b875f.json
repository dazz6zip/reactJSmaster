{"ast":null,"code":"var _jsxFileName = \"/Users/dazz6/Documents/study/react-masterclass/src/StyleComponent.js\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StyleComponent() {\n  const Wrapper = styled.div`\n    display: flex;\n    background-color: ${props => props.theme.backgroundColor};\n  `;\n\n  // styled.\"\" < html 코드\n  const Box = styled.div`\n    background-color: ${props => props.bgColor};\n    width: 100px;\n    height: 100px;\n  `;\n  const Text = styled.span`\n    color: white;\n  `;\n\n  // Box의 모든 속성들을 들고 온 다음 해당 속성만 추가함\n  // Box에서 props를 받아 처리했던 것도 동일하게 가능\n  const Circle = styled(Box)`\n    border-radius: 50px;\n  `;\n  const Btn = styled.button`\n    color: white;\n    background-color: tomato;\n    border: 0;\n    border-radius: 15px;\n  `;\n\n  // input component 안 모든 input에 required, minLength 속성 추가\n  const Input = styled.input.attrs({\n    required: true,\n    minLength: 10\n  })`\n    background-color: tomato;\n  `;\n\n  // keyframes : 애니메이션에서 사용 (styled-components와 별개)\n  const rotationAdnimation = keyframes`\n  0%{\n  transform:rotate(0deg);\n  border-radius:0px;\n  }\n  50%{\n  border-radius:100px;\n  }\n  100%{\n   transform:rotate(360deg);\n  border-radius:0px;\n  }\n`;\n  const Emoji = styled.span`\n    font-size: 36px;\n  `;\n\n  // Box1 내의 span 태그 선택 가능\n  // span 안에 있는 &:hover는 span:hover와 동일 -> tag 이름에 의존하는 상태\n  // ${Emoji} 형식을 사용해서 jsx 부분에는 <Emoji as=\"\">를 사용함으로 tag에 의존하지 않도록 할 수 있음\n  // (참고) active : 클릭하고 있는 상태\n  const Box1 = styled.div`\n    height: 200px;\n    width: 200px;\n    background-color: tomato;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    animation: ${rotationAdnimation} 1s linear infinite;\n    span {\n      font-size: 50px;\n      &:hover {\n        font-size: 70px;\n      }\n      &:active {\n        opacity: 0;\n      }\n    }\n    ${Emoji} {\n      font-size: 50px;\n      &:hover {\n        font-size: 70px;\n      }\n      &:active {\n        opacity: 0;\n      }\n    }\n  `;\n\n  /* theme : 색을 가지고 있는 모든 오브젝트 */\n  // index.js에서 설정\n\n  // index.js에서 준 props 가 dark인지 light인지 구분하여 스타일을 지정함\n  const Title = styled.h1`\n    color: ${props => props.theme.textColor};\n  `;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      bgColor: \"teal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Circle, {\n      bgColor: \"whitesmoke\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Btn, {\n      as: \"a\",\n      href: \"/\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box1, {\n      children: [/*#__PURE__*/_jsxDEV(Emoji, {\n        children: \"^_^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        children: \"\\uD558\\uD558\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_c = StyleComponent;\nvar _c;\n$RefreshReg$(_c, \"StyleComponent\");","map":{"version":3,"names":["styled","keyframes","jsxDEV","_jsxDEV","StyleComponent","Wrapper","div","props","theme","backgroundColor","Box","bgColor","Text","span","Circle","Btn","button","Input","input","attrs","required","minLength","rotationAdnimation","Emoji","Box1","Title","h1","textColor","children","fileName","_jsxFileName","lineNumber","columnNumber","as","href","_c","$RefreshReg$"],"sources":["/Users/dazz6/Documents/study/react-masterclass/src/StyleComponent.js"],"sourcesContent":["import styled, { keyframes } from \"styled-components\";\n\nexport default function StyleComponent() {\n  const Wrapper = styled.div`\n    display: flex;\n    background-color: ${(props) => props.theme.backgroundColor};\n  `;\n\n  // styled.\"\" < html 코드\n  const Box = styled.div`\n    background-color: ${(props) => props.bgColor};\n    width: 100px;\n    height: 100px;\n  `;\n\n  const Text = styled.span`\n    color: white;\n  `;\n\n  // Box의 모든 속성들을 들고 온 다음 해당 속성만 추가함\n  // Box에서 props를 받아 처리했던 것도 동일하게 가능\n  const Circle = styled(Box)`\n    border-radius: 50px;\n  `;\n\n  const Btn = styled.button`\n    color: white;\n    background-color: tomato;\n    border: 0;\n    border-radius: 15px;\n  `;\n\n  // input component 안 모든 input에 required, minLength 속성 추가\n  const Input = styled.input.attrs({ required: true, minLength: 10 })`\n    background-color: tomato;\n  `;\n\n  // keyframes : 애니메이션에서 사용 (styled-components와 별개)\n  const rotationAdnimation = keyframes`\n  0%{\n  transform:rotate(0deg);\n  border-radius:0px;\n  }\n  50%{\n  border-radius:100px;\n  }\n  100%{\n   transform:rotate(360deg);\n  border-radius:0px;\n  }\n`;\n\n  const Emoji = styled.span`\n    font-size: 36px;\n  `;\n\n  // Box1 내의 span 태그 선택 가능\n  // span 안에 있는 &:hover는 span:hover와 동일 -> tag 이름에 의존하는 상태\n  // ${Emoji} 형식을 사용해서 jsx 부분에는 <Emoji as=\"\">를 사용함으로 tag에 의존하지 않도록 할 수 있음\n  // (참고) active : 클릭하고 있는 상태\n  const Box1 = styled.div`\n    height: 200px;\n    width: 200px;\n    background-color: tomato;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    animation: ${rotationAdnimation} 1s linear infinite;\n    span {\n      font-size: 50px;\n      &:hover {\n        font-size: 70px;\n      }\n      &:active {\n        opacity: 0;\n      }\n    }\n    ${Emoji} {\n      font-size: 50px;\n      &:hover {\n        font-size: 70px;\n      }\n      &:active {\n        opacity: 0;\n      }\n    }\n  `;\n\n  /* theme : 색을 가지고 있는 모든 오브젝트 */\n  // index.js에서 설정\n\n  // index.js에서 준 props 가 dark인지 light인지 구분하여 스타일을 지정함\n  const Title = styled.h1`\n    color: ${(props) => props.theme.textColor};\n  `;\n\n  return (\n    <Wrapper>\n      <Box bgColor=\"teal\" />\n      <Circle bgColor=\"whitesmoke\" />\n      {/* as props 로 Btn의 button 태그를 a 태그로 변경하여 같은 스타일을 사용하는 다른 태그로 만듦 */}\n      <Btn as=\"a\" href=\"/\">\n        Log In\n      </Btn>\n      <Input />\n      <Input />\n      <Box1>\n        {/* 해당 span은 styled-components로 생성하지 않음 Box1 내에서 선택하여 처리함 */}\n        {/* <span>^_^</span> */}\n        <Emoji>^_^</Emoji>\n        <Title>하하</Title>\n      </Box1>\n    </Wrapper>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}