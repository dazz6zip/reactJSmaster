{"ast":null,"code":"var _jsxFileName = \"/Users/dazz6/Documents/study/react-masterclass/src/Circle.tsx\",\n  _s = $RefreshSig$();\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\n// interface : 객체 모양을 typescript에게 설명\n\n/* Container 라는 styled-component 를 지정하는 데 있어서, 값을 받아 유동적으로 처리할 오브젝트(bgColor)에 대해 들어올 값을 문자열 (string) 으로 지정해 둠 */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/* ContainerProps 에서 지정한 것처럼 bgColor는 문자열(string)으로 받음을 div 태그 뒤에 명시함.\n뒤에 ContainerProps 를 지정해 주었으므로 Container 안에 있는 bgColor 속성은 무조건 string 임 */\nconst Container = styled.div`\n  width: 200px;\n  height: 200px;\n  background-color: ${props => props.bgColor};\n  border-radius: 100px;\n  border: 1px solid ${props => props.borderColor};\n`;\n\n/* CircleProps interface 지정.\nCircle 이라는 컴포넌트를 부를 때 bgColor를 지정해 줄 건데 그 값이 문자열(string)임. */\n_c = Container;\n/* Circle 컴포넌트에서 bgColor를 필수로 받아야 하는 props로 정의하고, -> <Circle bgColor=\"...\"> 속성 필수\n그 props는 CircleProps에서 지정했듯 문자열(string)만 가능함\nCircle 컴포넌트에서 bgColor라는 이름으로 받는 props는 무조건 문자열 (string) 이어야 한다는 것. */\n/* \nQ. 지금 ContainerProps와 CircleProps는 이름만 다를 뿐 내용은 같은데 \n(bgColor:string) 둘을 굳이 다른 이름으로 두 번 저장한 것이 가독성 및 편의 구분을 위한 것인가? 같은 걸 여러 군데에서 쓰는 것이 낫지 않은가?\nA. bgColorProps 로 통일하여 하나로 사용하는 것이 효율적.\n*/\n// CircleProps 타입 안에 있는 bgColor에 타입이 정의되어 있음을 표시\nfunction Circle({\n  bgColor,\n  borderColor,\n  text = \"default text 지정하는 법 (text가 null일 경우)\"\n}) {\n  _s();\n  const [counter, setCounter] = useState();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    bgColor: bgColor,\n    borderColor: borderColor !== null && borderColor !== void 0 ? borderColor : bgColor,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n// borderColor ?? bgColor -> borderColor 가 null 이면 bgColor로 설정\n/* Circle 에서 bgColor 값을 받고, Circle 이 포함된 Container 를 반환하기 때문에\nCircleProps, ContainerProps 둘 다 bgColor 및 borderColor를 지정해 줘야 하는 것. */\n_s(Circle, \"XWf0T5j8RZ3xvKBQwBkpse5aNk8=\");\n_c2 = Circle;\nexport default Circle;\n\n/* name은 문자열(String), age는 숫자(number)로 타입 지정 */\n\n/* sayHello 라는 컴포넌트 생성. 받을 값에 대한 타입은 위에서 지정한 PlayerShape 사용 */\nconst sayHello = playerObj => `Hello ${playerObj.name}. you are ${playerObj.age} years old.`;\n\n/* 컴포넌트를 호출할 때 PlayerShape 에서 지정한 타입이 아닐 경우 에러 발생 */\nsayHello({\n  name: \"name\",\n  age: 12\n});\n// sayHello({ name: \"name\", age: \"12\" }); // 에러 발생\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Circle\");","map":{"version":3,"names":["styled","useState","jsxDEV","_jsxDEV","Container","div","props","bgColor","borderColor","_c","Circle","text","_s","counter","setCounter","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","sayHello","playerObj","name","age","$RefreshReg$"],"sources":["/Users/dazz6/Documents/study/react-masterclass/src/Circle.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { useState } from \"react\";\n\n// interface : 객체 모양을 typescript에게 설명\n\n/* Container 라는 styled-component 를 지정하는 데 있어서, 값을 받아 유동적으로 처리할 오브젝트(bgColor)에 대해 들어올 값을 문자열 (string) 으로 지정해 둠 */\ninterface ContainerProps {\n  bgColor: string;\n  borderColor?: string;\n  // 여기도 optinal 로 지정해 주지 않으면 오류 발생 (CircleProps의 지정과는 별개로 여기서는 borderColor props를 required로 알고 있기 때문)\n\n  text?: string;\n}\n\n/* ContainerProps 에서 지정한 것처럼 bgColor는 문자열(string)으로 받음을 div 태그 뒤에 명시함.\n뒤에 ContainerProps 를 지정해 주었으므로 Container 안에 있는 bgColor 속성은 무조건 string 임 */\nconst Container = styled.div<ContainerProps>`\n  width: 200px;\n  height: 200px;\n  background-color: ${(props) => props.bgColor};\n  border-radius: 100px;\n  border: 1px solid ${(props) => props.borderColor};\n`;\n\n/* CircleProps interface 지정.\nCircle 이라는 컴포넌트를 부를 때 bgColor를 지정해 줄 건데 그 값이 문자열(string)임. */\ninterface CircleProps {\n  bgColor: string;\n  borderColor?: string;\n  // optinal props 설정\n\n  text?: string;\n}\n\n/* Circle 컴포넌트에서 bgColor를 필수로 받아야 하는 props로 정의하고, -> <Circle bgColor=\"...\"> 속성 필수\n그 props는 CircleProps에서 지정했듯 문자열(string)만 가능함\nCircle 컴포넌트에서 bgColor라는 이름으로 받는 props는 무조건 문자열 (string) 이어야 한다는 것. */\n/* \nQ. 지금 ContainerProps와 CircleProps는 이름만 다를 뿐 내용은 같은데 \n(bgColor:string) 둘을 굳이 다른 이름으로 두 번 저장한 것이 가독성 및 편의 구분을 위한 것인가? 같은 걸 여러 군데에서 쓰는 것이 낫지 않은가?\nA. bgColorProps 로 통일하여 하나로 사용하는 것이 효율적.\n*/\n// CircleProps 타입 안에 있는 bgColor에 타입이 정의되어 있음을 표시\nfunction Circle({\n  bgColor,\n  borderColor,\n  text = \"default text 지정하는 법 (text가 null일 경우)\",\n}: CircleProps) {\n  const [counter, setCounter] = useState();\n  return (\n    <Container bgColor={bgColor} borderColor={borderColor ?? bgColor}>\n      {text}\n    </Container>\n  );\n}\n// borderColor ?? bgColor -> borderColor 가 null 이면 bgColor로 설정\n/* Circle 에서 bgColor 값을 받고, Circle 이 포함된 Container 를 반환하기 때문에\nCircleProps, ContainerProps 둘 다 bgColor 및 borderColor를 지정해 줘야 하는 것. */\n\nexport default Circle;\n\n/* name은 문자열(String), age는 숫자(number)로 타입 지정 */\ninterface PlayerShape {\n  name: string;\n  age: number;\n}\n\n/* sayHello 라는 컴포넌트 생성. 받을 값에 대한 타입은 위에서 지정한 PlayerShape 사용 */\nconst sayHello = (playerObj: PlayerShape) =>\n  `Hello ${playerObj.name}. you are ${playerObj.age} years old.`;\n\n/* 컴포넌트를 호출할 때 PlayerShape 에서 지정한 타입이 아닐 경우 에러 발생 */\nsayHello({ name: \"name\", age: 12 });\n// sayHello({ name: \"name\", age: \"12\" }); // 에러 발생\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA;AACA;AACA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAmB;AAC5C;AACA;AACA,sBAAuBC,KAAK,IAAKA,KAAK,CAACC,OAAO;AAC9C;AACA,sBAAuBD,KAAK,IAAKA,KAAK,CAACE,WAAW;AAClD,CAAC;;AAED;AACA;AADAC,EAAA,GARML,SAAS;AAkBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,MAAMA,CAAC;EACdH,OAAO;EACPC,WAAW;EACXG,IAAI,GAAG;AACI,CAAC,EAAE;EAAAC,EAAA;EACd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,CAAC;EACxC,oBACEE,OAAA,CAACC,SAAS;IAACG,OAAO,EAAEA,OAAQ;IAACC,WAAW,EAAEA,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAID,OAAQ;IAAAQ,QAAA,EAC9DJ;EAAI;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEhB;AACA;AACA;AACA;AADAP,EAAA,CAbSF,MAAM;AAAAU,GAAA,GAANV,MAAM;AAgBf,eAAeA,MAAM;;AAErB;;AAMA;AACA,MAAMW,QAAQ,GAAIC,SAAsB,IACtC,SAASA,SAAS,CAACC,IAAI,aAAaD,SAAS,CAACE,GAAG,aAAa;;AAEhE;AACAH,QAAQ,CAAC;EAAEE,IAAI,EAAE,MAAM;EAAEC,GAAG,EAAE;AAAG,CAAC,CAAC;AACnC;AAAA,IAAAf,EAAA,EAAAW,GAAA;AAAAK,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAL,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}